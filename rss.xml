<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>About:Blank</title>
        <link>http://philopon.github.io/</link>
        <description><![CDATA[]]></description>
        <atom:link href="http://philopon.github.io//rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Tue, 25 Feb 2014 23:50:52 UT</lastBuildDate>
        <item>
    <title>Hakyllでgithub.ioにブログ作った</title>
    <link>http://philopon.github.io//posts/2014/create_blog.html</link>
    <description><![CDATA[<p>テスト投稿を兼ねてこの記事を書いている時の操作について書いておきます。</p>
<ol style="list-style-type: decimal">
<li>Hakyllに<code>watch</code>引数を与えて起動する。</li>
<li>おもむろに記事を書く。<code>localhost:8000</code>でプレビューできる。</li>
<li>完成したら<a href="https://github.com/philopon/philopon.github.io/blob/sources/deploy.sh">デプロイスクリプト</a>を実行して記事&amp;元のmarkdownファイルをデプロイ。</li>
</ol>
<p>デプロイスクリプトでは、</p>
<ol style="list-style-type: decimal">
<li><code>site.hs rebuild</code>で再ビルド</li>
<li><code>_site</code>から<code>rsync</code>で<code>deploy</code>ディレクトリにコピー</li>
<li><code>deploy</code>ディレクトリ(remote originをphilopon.github.ioに、branchをmasterにしてる)に移動して全ファイルをgithub pagesのmasterブランチにpush</li>
<li>ルートディレクトリに戻って<code>posts</code>以下をsourcesブランチにpush</li>
</ol>
<p>みたいな操作をしております。<code>set -e</code>してるので3で新しいファイルが無かったりするとそこで止まってくれます。<code>set -e</code>便利。</p>]]></description>
    <pubDate>Tue, 25 Feb 2014 23:50:52 UT</pubDate>
    <guid>http://philopon.github.io//posts/2014/create_blog.html</guid>
</item>
<item>
    <title>runsandbox作った</title>
    <link>http://philopon.github.io//posts/2014/runsanbbox.html</link>
    <description><![CDATA[<p><code>cabal sandbox</code>使ってますか？私は使ってませんでした。</p>
<p>プロジェクト毎にコンパイルするの、特にyesodとかの巨大パッケージだと死ねます。まぁそれは最初の一回だけなので我慢しましょう。ぐっと我慢して使い始めてさあ実行してみよう、と<code>cabal run</code>すると……</p>
<pre class="sh"><code>$ time cabal run clean
Package has never been configured. Configuring with default flags. If this
fails, please run configure manually.
Resolving dependencies...
Configuring githubio-0.1.0.0...
Preprocessing executable &#39;githubio&#39; for githubio-0.1.0.0...
[1 of 1] Compiling Main             ( site.hs, dist/build/githubio/githubio-tmp/Main.o )
Linking dist/build/githubio/githubio ...
Removing _site...
Removing _cache...
Removing _cache/tmp...
cabal run clean  10.36s user 1.25s system 92% cpu 12.613 total</code></pre>
<p>なんと言うことでしょう。10秒以上待たされました。なんといちいちコンパイルしているのです。 これでは私のようなちょっと書いて実行してみて考える、残念な人にとっては使い物になりません。</p>
<p>幸いにして<code>cabal.sandbox.config</code>のpackage-dbを食わせてやれば<code>runhaskell</code>でもsandbox中のパッケージを使えるようです。</p>
<pre class="sh"><code>$ grep package-db cabal.sanbox.config
package-db: `pwd`/.cabal-sandbox/x86_64-osx-ghc-7.6.3-packages.conf.d

$ time runhaskell -no-user-package-db -package-db=`pwd`/.cabal-sandbox/x86_64-osx-ghc-7.6.3-packages.conf.d site.hs clean
Removing _site...
Removing _cache...
Removing _cache/tmp...
runhaskell -no-user-package-db  site.hs clean  1.63s user 0.30s system 96% cpu 1.989 total</code></pre>
<p>ので、これを簡単に実行するプログラムを書きました。便利！</p>
<pre class="sh"><code>$ time runsandbox site.hs clean
Removing _site...
Removing _cache...
Removing _cache/tmp...
runsandbox site.hs clean  1.59s user 0.27s system 98% cpu 1.894 tota</code></pre>
<p>ソースは<a href="https://github.com/philopon/runsandbox">こちら</a></p>]]></description>
    <pubDate>Wed, 26 Feb 2014 00:53:15 UT</pubDate>
    <guid>http://philopon.github.io//posts/2014/runsanbbox.html</guid>
</item>

    </channel> 
</rss>
